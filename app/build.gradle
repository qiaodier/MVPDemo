apply plugin: 'com.android.application'
//apply plugin: 'com.jakewharton.butterknife'
apply from: "./upload2Pgyer.gradle"
apply plugin: "androidx.navigation.safeargs"
apply plugin: "kotlin-android"
apply plugin: 'kotlin-android-extensions'

//这里不写单引号，写上会报错找不到,加单引号的话需要插件本身用meta-inf注册为插件
//apply plugin: com.mvp.plugin.JiaguPlugin


// 打包时间
static def buildTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("GMT+08:00"))
}

def jks = rootProject.file("safeinfo.properties")
def configinfo = new Properties()
configinfo.load(new FileInputStream(jks))

//360 加固+打包配置+自动上传蒲公英
//jiaguAndUpload {
//    qihuPath = configinfo['JIAGU_JAR_PATH']
//    keyStorePath = configinfo['STORE_FILE']
//    keyStorePass = configinfo['STORE_PASSWORD']
//    keyStoreKeyAlias = configinfo['KEY_ALIAS']
//    keyStoreKeyAliasPass = configinfo['KEY_ALIAS_PASSWORD']
//    userName360 = configinfo['USER_NAME']
//    userPwd360 = configinfo['USER_PWD']
//    jiaguFlag = configinfo['JIAGU_FLAG']
//    apiKey = configinfo['API_KEY']
//    uKey = configinfo['U_KEY']
//    desc = configinfo['DESC']
//    pwd = configinfo['PWD']
//
//}


android {
    project.ext.upload2d project, "初次上传"
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    aaptOptions.cruncherEnabled = false
    aaptOptions.useNewCruncher = false
    flavorDimensions rootProject.ext.android["flavorDimensions"]
    defaultConfig {
        applicationId rootProject.ext.android["applicationId"]
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        testInstrumentationRunner rootProject.ext.android["testInstrumentationRunner"]
//        multiDexEnabled true
        javaCompileOptions.annotationProcessorOptions.arguments = [packageName: rootProject.ext.android["applicationId"]]
        ndk {
            moduleName "InfoJni"          //生成的so名字,这个可以随意取名
            abiFilters "armeabi", "armeabi-v7a", "x86" //输出指定三种abi体系结构下的so库，目前可有可无。
        }
    }

    //签名配置
    signingConfigs {
        //发布版本
        release {
            storeFile file(configinfo["STORE_FILE"])
            storePassword configinfo["STORE_PASSWORD"]
            keyAlias configinfo["KEY_ALIAS"]
            keyPassword configinfo["KEY_ALIAS_PASSWORD"]
        }
        //开发版本配置
        debug {

        }
    }
    buildTypes {
        debug {

            signingConfig signingConfigs.release
            minifyEnabled false
            buildConfigField "boolean", "LOG_DEBUG", "true"

        }
        release {
            signingConfig signingConfigs.release
            buildConfigField "boolean", "LOG_DEBUG", "false"
            minifyEnabled true
            shrinkResources true
            //解决3.1.2 版本studio打包遇到aapt2的问题
            aaptOptions.cruncherEnabled = false
            aaptOptions.useNewCruncher = false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


    //打包后apk重命名
    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                // 输出apk名称
                def buildType = variant.buildType.name
                def channel = variant.productFlavors[0].name
                output.outputFileName = "${variant.versionName}(${variant.versionCode})-${buildTime()}-${channel}-${buildType}.apk"
//            variant.packageApplicationProvider.get().outputDirectory = new File("${project.projectDir.absolutePath}/build/outputs/apk/${buildType}")

            }
        }
    }

    //渠道配置
    productFlavors {
        dev {
            //服务器测试url
            buildConfigField "String", "BASE_URL", '"https:www.baidu.com/"'
        }

    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    ndkVersion '21.0.6113669'


}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //约束布局
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    testImplementation 'junit:junit:4.12'
    //rxpermissions
    implementation 'com.github.tbruyelle:rxpermissions:0.10.2'
    //navigation
    implementation "androidx.navigation:navigation-fragment:$nav_version"
    implementation "androidx.navigation:navigation-ui:$nav_version"
    // mvp架构+网络请求+自定义注解+
    implementation project(path: ':mvp_master')
    annotationProcessor project(':router-compiler')
    //apt
    annotationProcessor "com.neenbedankt.gradle.plugins:android-apt:1.8"
//    implementation 'com.mvp.plugin:JiaguPlugin:1.0.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.2.0'
//    def anko_version = '0.10.1'
//    // Anko Commons
//    implementation "org.jetbrains.anko:anko-commons:$anko_version"
//    // Anko Layouts
//    implementation "org.jetbrains.anko:anko-sdk25:$anko_version" // sdk15, sdk19, sdk21, sdk23 are also available
//    implementation "org.jetbrains.anko:anko-support-v4:$anko_version"
//    implementation "org.jetbrains.anko:anko-appcompat-v7:$anko_version"
//    // Coroutine listeners for Anko Layouts
//    implementation "org.jetbrains.anko:anko-sdk25-coroutines:$anko_version"
//    implementation "org.jetbrains.anko:anko-appcompat-v7-coroutines:$anko_version"
//    // Anko SQLite
//    implementation "org.jetbrains.anko:anko-sqlite:$anko_version"
}



